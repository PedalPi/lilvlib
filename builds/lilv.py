# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_lilv', [dirname(__file__)])
        except ImportError:
            import _lilv
            return _lilv
        if fp is not None:
            try:
                _mod = imp.load_module('_lilv', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _lilv = swig_import_helper()
    del swig_import_helper
else:
    import _lilv
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


LILV_NS_DOAP = _lilv.LILV_NS_DOAP
LILV_NS_FOAF = _lilv.LILV_NS_FOAF
LILV_NS_LILV = _lilv.LILV_NS_LILV
LILV_NS_LV2 = _lilv.LILV_NS_LV2
LILV_NS_OWL = _lilv.LILV_NS_OWL
LILV_NS_RDF = _lilv.LILV_NS_RDF
LILV_NS_RDFS = _lilv.LILV_NS_RDFS
LILV_NS_XSD = _lilv.LILV_NS_XSD
LILV_URI_ATOM_PORT = _lilv.LILV_URI_ATOM_PORT
LILV_URI_AUDIO_PORT = _lilv.LILV_URI_AUDIO_PORT
LILV_URI_CONTROL_PORT = _lilv.LILV_URI_CONTROL_PORT
LILV_URI_CV_PORT = _lilv.LILV_URI_CV_PORT
LILV_URI_EVENT_PORT = _lilv.LILV_URI_EVENT_PORT
LILV_URI_INPUT_PORT = _lilv.LILV_URI_INPUT_PORT
LILV_URI_MIDI_EVENT = _lilv.LILV_URI_MIDI_EVENT
LILV_URI_OUTPUT_PORT = _lilv.LILV_URI_OUTPUT_PORT
LILV_URI_PORT = _lilv.LILV_URI_PORT

def lilv_free(*args) -> "void" :
  """lilv_free(void * ptr)"""
  return _lilv.lilv_free(*args)

def lilv_uri_to_path(*args) -> "char const *" :
  """lilv_uri_to_path(char const * uri) -> char const *"""
  return _lilv.lilv_uri_to_path(*args)

def lilv_file_uri_parse(*args) -> "char *" :
  """lilv_file_uri_parse(char const * uri, char ** hostname) -> char *"""
  return _lilv.lilv_file_uri_parse(*args)

def lilv_new_uri(*args) -> "LilvNode *" :
  """lilv_new_uri(LilvWorld * world, char const * uri) -> LilvNode *"""
  return _lilv.lilv_new_uri(*args)

def lilv_new_file_uri(*args) -> "LilvNode *" :
  """lilv_new_file_uri(LilvWorld * world, char const * host, char const * path) -> LilvNode *"""
  return _lilv.lilv_new_file_uri(*args)

def lilv_new_string(*args) -> "LilvNode *" :
  """lilv_new_string(LilvWorld * world, char const * str) -> LilvNode *"""
  return _lilv.lilv_new_string(*args)

def lilv_new_int(*args) -> "LilvNode *" :
  """lilv_new_int(LilvWorld * world, int val) -> LilvNode *"""
  return _lilv.lilv_new_int(*args)

def lilv_new_float(*args) -> "LilvNode *" :
  """lilv_new_float(LilvWorld * world, float val) -> LilvNode *"""
  return _lilv.lilv_new_float(*args)

def lilv_new_bool(*args) -> "LilvNode *" :
  """lilv_new_bool(LilvWorld * world, bool val) -> LilvNode *"""
  return _lilv.lilv_new_bool(*args)

def lilv_node_free(*args) -> "void" :
  """lilv_node_free(LilvNode * val)"""
  return _lilv.lilv_node_free(*args)

def lilv_node_duplicate(*args) -> "LilvNode *" :
  """lilv_node_duplicate(LilvNode const * val) -> LilvNode *"""
  return _lilv.lilv_node_duplicate(*args)

def lilv_node_equals(*args) -> "bool" :
  """lilv_node_equals(LilvNode const * value, LilvNode const * other) -> bool"""
  return _lilv.lilv_node_equals(*args)

def lilv_node_get_turtle_token(*args) -> "char *" :
  """lilv_node_get_turtle_token(LilvNode const * value) -> char *"""
  return _lilv.lilv_node_get_turtle_token(*args)

def lilv_node_is_uri(*args) -> "bool" :
  """lilv_node_is_uri(LilvNode const * value) -> bool"""
  return _lilv.lilv_node_is_uri(*args)

def lilv_node_as_uri(*args) -> "char const *" :
  """lilv_node_as_uri(LilvNode const * value) -> char const *"""
  return _lilv.lilv_node_as_uri(*args)

def lilv_node_is_blank(*args) -> "bool" :
  """lilv_node_is_blank(LilvNode const * value) -> bool"""
  return _lilv.lilv_node_is_blank(*args)

def lilv_node_as_blank(*args) -> "char const *" :
  """lilv_node_as_blank(LilvNode const * value) -> char const *"""
  return _lilv.lilv_node_as_blank(*args)

def lilv_node_is_literal(*args) -> "bool" :
  """lilv_node_is_literal(LilvNode const * value) -> bool"""
  return _lilv.lilv_node_is_literal(*args)

def lilv_node_is_string(*args) -> "bool" :
  """lilv_node_is_string(LilvNode const * value) -> bool"""
  return _lilv.lilv_node_is_string(*args)

def lilv_node_as_string(*args) -> "char const *" :
  """lilv_node_as_string(LilvNode const * value) -> char const *"""
  return _lilv.lilv_node_as_string(*args)

def lilv_node_get_path(*args) -> "char *" :
  """lilv_node_get_path(LilvNode const * value, char ** hostname) -> char *"""
  return _lilv.lilv_node_get_path(*args)

def lilv_node_is_float(*args) -> "bool" :
  """lilv_node_is_float(LilvNode const * value) -> bool"""
  return _lilv.lilv_node_is_float(*args)

def lilv_node_as_float(*args) -> "float" :
  """lilv_node_as_float(LilvNode const * value) -> float"""
  return _lilv.lilv_node_as_float(*args)

def lilv_node_is_int(*args) -> "bool" :
  """lilv_node_is_int(LilvNode const * value) -> bool"""
  return _lilv.lilv_node_is_int(*args)

def lilv_node_as_int(*args) -> "int" :
  """lilv_node_as_int(LilvNode const * value) -> int"""
  return _lilv.lilv_node_as_int(*args)

def lilv_node_is_bool(*args) -> "bool" :
  """lilv_node_is_bool(LilvNode const * value) -> bool"""
  return _lilv.lilv_node_is_bool(*args)

def lilv_node_as_bool(*args) -> "bool" :
  """lilv_node_as_bool(LilvNode const * value) -> bool"""
  return _lilv.lilv_node_as_bool(*args)

def lilv_plugin_classes_free(*args) -> "void" :
  """lilv_plugin_classes_free(LilvPluginClasses * collection)"""
  return _lilv.lilv_plugin_classes_free(*args)

def lilv_plugin_classes_size(*args) -> "unsigned int" :
  """lilv_plugin_classes_size(LilvPluginClasses const * collection) -> unsigned int"""
  return _lilv.lilv_plugin_classes_size(*args)

def lilv_plugin_classes_begin(*args) -> "LilvIter *" :
  """lilv_plugin_classes_begin(LilvPluginClasses const * collection) -> LilvIter *"""
  return _lilv.lilv_plugin_classes_begin(*args)

def lilv_plugin_classes_get(*args) -> "LilvPluginClass const *" :
  """lilv_plugin_classes_get(LilvPluginClasses const * collection, LilvIter * i) -> LilvPluginClass const *"""
  return _lilv.lilv_plugin_classes_get(*args)

def lilv_plugin_classes_next(*args) -> "LilvIter *" :
  """lilv_plugin_classes_next(LilvPluginClasses const * collection, LilvIter * i) -> LilvIter *"""
  return _lilv.lilv_plugin_classes_next(*args)

def lilv_plugin_classes_is_end(*args) -> "bool" :
  """lilv_plugin_classes_is_end(LilvPluginClasses const * collection, LilvIter * i) -> bool"""
  return _lilv.lilv_plugin_classes_is_end(*args)

def lilv_plugin_classes_get_by_uri(*args) -> "LilvPluginClass const *" :
  """lilv_plugin_classes_get_by_uri(LilvPluginClasses const * classes, LilvNode const * uri) -> LilvPluginClass const *"""
  return _lilv.lilv_plugin_classes_get_by_uri(*args)

def lilv_scale_points_free(*args) -> "void" :
  """lilv_scale_points_free(LilvScalePoints * collection)"""
  return _lilv.lilv_scale_points_free(*args)

def lilv_scale_points_size(*args) -> "unsigned int" :
  """lilv_scale_points_size(LilvScalePoints const * collection) -> unsigned int"""
  return _lilv.lilv_scale_points_size(*args)

def lilv_scale_points_begin(*args) -> "LilvIter *" :
  """lilv_scale_points_begin(LilvScalePoints const * collection) -> LilvIter *"""
  return _lilv.lilv_scale_points_begin(*args)

def lilv_scale_points_get(*args) -> "LilvScalePoint const *" :
  """lilv_scale_points_get(LilvScalePoints const * collection, LilvIter * i) -> LilvScalePoint const *"""
  return _lilv.lilv_scale_points_get(*args)

def lilv_scale_points_next(*args) -> "LilvIter *" :
  """lilv_scale_points_next(LilvScalePoints const * collection, LilvIter * i) -> LilvIter *"""
  return _lilv.lilv_scale_points_next(*args)

def lilv_scale_points_is_end(*args) -> "bool" :
  """lilv_scale_points_is_end(LilvScalePoints const * collection, LilvIter * i) -> bool"""
  return _lilv.lilv_scale_points_is_end(*args)

def lilv_uis_free(*args) -> "void" :
  """lilv_uis_free(LilvUIs * collection)"""
  return _lilv.lilv_uis_free(*args)

def lilv_uis_size(*args) -> "unsigned int" :
  """lilv_uis_size(LilvUIs const * collection) -> unsigned int"""
  return _lilv.lilv_uis_size(*args)

def lilv_uis_begin(*args) -> "LilvIter *" :
  """lilv_uis_begin(LilvUIs const * collection) -> LilvIter *"""
  return _lilv.lilv_uis_begin(*args)

def lilv_uis_get(*args) -> "LilvUI const *" :
  """lilv_uis_get(LilvUIs const * collection, LilvIter * i) -> LilvUI const *"""
  return _lilv.lilv_uis_get(*args)

def lilv_uis_next(*args) -> "LilvIter *" :
  """lilv_uis_next(LilvUIs const * collection, LilvIter * i) -> LilvIter *"""
  return _lilv.lilv_uis_next(*args)

def lilv_uis_is_end(*args) -> "bool" :
  """lilv_uis_is_end(LilvUIs const * collection, LilvIter * i) -> bool"""
  return _lilv.lilv_uis_is_end(*args)

def lilv_uis_get_by_uri(*args) -> "LilvUI const *" :
  """lilv_uis_get_by_uri(LilvUIs const * uis, LilvNode const * uri) -> LilvUI const *"""
  return _lilv.lilv_uis_get_by_uri(*args)

def lilv_nodes_free(*args) -> "void" :
  """lilv_nodes_free(LilvNodes * collection)"""
  return _lilv.lilv_nodes_free(*args)

def lilv_nodes_size(*args) -> "unsigned int" :
  """lilv_nodes_size(LilvNodes const * collection) -> unsigned int"""
  return _lilv.lilv_nodes_size(*args)

def lilv_nodes_begin(*args) -> "LilvIter *" :
  """lilv_nodes_begin(LilvNodes const * collection) -> LilvIter *"""
  return _lilv.lilv_nodes_begin(*args)

def lilv_nodes_get(*args) -> "LilvNode const *" :
  """lilv_nodes_get(LilvNodes const * collection, LilvIter * i) -> LilvNode const *"""
  return _lilv.lilv_nodes_get(*args)

def lilv_nodes_next(*args) -> "LilvIter *" :
  """lilv_nodes_next(LilvNodes const * collection, LilvIter * i) -> LilvIter *"""
  return _lilv.lilv_nodes_next(*args)

def lilv_nodes_is_end(*args) -> "bool" :
  """lilv_nodes_is_end(LilvNodes const * collection, LilvIter * i) -> bool"""
  return _lilv.lilv_nodes_is_end(*args)

def lilv_nodes_get_first(*args) -> "LilvNode *" :
  """lilv_nodes_get_first(LilvNodes const * collection) -> LilvNode *"""
  return _lilv.lilv_nodes_get_first(*args)

def lilv_nodes_contains(*args) -> "bool" :
  """lilv_nodes_contains(LilvNodes const * values, LilvNode const * value) -> bool"""
  return _lilv.lilv_nodes_contains(*args)

def lilv_nodes_merge(*args) -> "LilvNodes *" :
  """lilv_nodes_merge(LilvNodes const * a, LilvNodes const * b) -> LilvNodes *"""
  return _lilv.lilv_nodes_merge(*args)

def lilv_plugins_size(*args) -> "unsigned int" :
  """lilv_plugins_size(LilvPlugins const * collection) -> unsigned int"""
  return _lilv.lilv_plugins_size(*args)

def lilv_plugins_begin(*args) -> "LilvIter *" :
  """lilv_plugins_begin(LilvPlugins const * collection) -> LilvIter *"""
  return _lilv.lilv_plugins_begin(*args)

def lilv_plugins_get(*args) -> "LilvPlugin const *" :
  """lilv_plugins_get(LilvPlugins const * collection, LilvIter * i) -> LilvPlugin const *"""
  return _lilv.lilv_plugins_get(*args)

def lilv_plugins_next(*args) -> "LilvIter *" :
  """lilv_plugins_next(LilvPlugins const * collection, LilvIter * i) -> LilvIter *"""
  return _lilv.lilv_plugins_next(*args)

def lilv_plugins_is_end(*args) -> "bool" :
  """lilv_plugins_is_end(LilvPlugins const * collection, LilvIter * i) -> bool"""
  return _lilv.lilv_plugins_is_end(*args)

def lilv_plugins_get_by_uri(*args) -> "LilvPlugin const *" :
  """lilv_plugins_get_by_uri(LilvPlugins const * plugins, LilvNode const * uri) -> LilvPlugin const *"""
  return _lilv.lilv_plugins_get_by_uri(*args)

def lilv_world_new(*args) -> "LilvWorld *" :
  """lilv_world_new() -> LilvWorld *"""
  return _lilv.lilv_world_new(*args)
LILV_OPTION_FILTER_LANG = _lilv.LILV_OPTION_FILTER_LANG
LILV_OPTION_DYN_MANIFEST = _lilv.LILV_OPTION_DYN_MANIFEST

def lilv_world_set_option(*args) -> "void" :
  """lilv_world_set_option(LilvWorld * world, char const * uri, LilvNode const * value)"""
  return _lilv.lilv_world_set_option(*args)

def lilv_world_free(*args) -> "void" :
  """lilv_world_free(LilvWorld * world)"""
  return _lilv.lilv_world_free(*args)

def lilv_world_load_all(*args) -> "void" :
  """lilv_world_load_all(LilvWorld * world)"""
  return _lilv.lilv_world_load_all(*args)

def lilv_world_load_bundle(*args) -> "void" :
  """lilv_world_load_bundle(LilvWorld * world, LilvNode const * bundle_uri)"""
  return _lilv.lilv_world_load_bundle(*args)

def lilv_world_load_specifications(*args) -> "void" :
  """lilv_world_load_specifications(LilvWorld * world)"""
  return _lilv.lilv_world_load_specifications(*args)

def lilv_world_load_plugin_classes(*args) -> "void" :
  """lilv_world_load_plugin_classes(LilvWorld * world)"""
  return _lilv.lilv_world_load_plugin_classes(*args)

def lilv_world_unload_bundle(*args) -> "int" :
  """lilv_world_unload_bundle(LilvWorld * world, LilvNode const * bundle_uri) -> int"""
  return _lilv.lilv_world_unload_bundle(*args)

def lilv_world_load_resource(*args) -> "int" :
  """lilv_world_load_resource(LilvWorld * world, LilvNode const * resource) -> int"""
  return _lilv.lilv_world_load_resource(*args)

def lilv_world_unload_resource(*args) -> "int" :
  """lilv_world_unload_resource(LilvWorld * world, LilvNode const * resource) -> int"""
  return _lilv.lilv_world_unload_resource(*args)

def lilv_world_get_plugin_class(*args) -> "LilvPluginClass const *" :
  """lilv_world_get_plugin_class(LilvWorld const * world) -> LilvPluginClass const *"""
  return _lilv.lilv_world_get_plugin_class(*args)

def lilv_world_get_plugin_classes(*args) -> "LilvPluginClasses const *" :
  """lilv_world_get_plugin_classes(LilvWorld const * world) -> LilvPluginClasses const *"""
  return _lilv.lilv_world_get_plugin_classes(*args)

def lilv_world_get_all_plugins(*args) -> "LilvPlugins const *" :
  """lilv_world_get_all_plugins(LilvWorld const * world) -> LilvPlugins const *"""
  return _lilv.lilv_world_get_all_plugins(*args)

def lilv_world_find_nodes(*args) -> "LilvNodes *" :
  """lilv_world_find_nodes(LilvWorld * world, LilvNode const * subject, LilvNode const * predicate, LilvNode const * object) -> LilvNodes *"""
  return _lilv.lilv_world_find_nodes(*args)

def lilv_world_get(*args) -> "LilvNode *" :
  """lilv_world_get(LilvWorld * world, LilvNode const * subject, LilvNode const * predicate, LilvNode const * object) -> LilvNode *"""
  return _lilv.lilv_world_get(*args)

def lilv_world_ask(*args) -> "bool" :
  """lilv_world_ask(LilvWorld * world, LilvNode const * subject, LilvNode const * predicate, LilvNode const * object) -> bool"""
  return _lilv.lilv_world_ask(*args)

def lilv_plugin_verify(*args) -> "bool" :
  """lilv_plugin_verify(LilvPlugin const * plugin) -> bool"""
  return _lilv.lilv_plugin_verify(*args)

def lilv_plugin_get_uri(*args) -> "LilvNode const *" :
  """lilv_plugin_get_uri(LilvPlugin const * plugin) -> LilvNode const *"""
  return _lilv.lilv_plugin_get_uri(*args)

def lilv_plugin_get_bundle_uri(*args) -> "LilvNode const *" :
  """lilv_plugin_get_bundle_uri(LilvPlugin const * plugin) -> LilvNode const *"""
  return _lilv.lilv_plugin_get_bundle_uri(*args)

def lilv_plugin_get_data_uris(*args) -> "LilvNodes const *" :
  """lilv_plugin_get_data_uris(LilvPlugin const * plugin) -> LilvNodes const *"""
  return _lilv.lilv_plugin_get_data_uris(*args)

def lilv_plugin_get_library_uri(*args) -> "LilvNode const *" :
  """lilv_plugin_get_library_uri(LilvPlugin const * plugin) -> LilvNode const *"""
  return _lilv.lilv_plugin_get_library_uri(*args)

def lilv_plugin_get_name(*args) -> "LilvNode *" :
  """lilv_plugin_get_name(LilvPlugin const * plugin) -> LilvNode *"""
  return _lilv.lilv_plugin_get_name(*args)

def lilv_plugin_get_class(*args) -> "LilvPluginClass const *" :
  """lilv_plugin_get_class(LilvPlugin const * plugin) -> LilvPluginClass const *"""
  return _lilv.lilv_plugin_get_class(*args)

def lilv_plugin_get_value(*args) -> "LilvNodes *" :
  """lilv_plugin_get_value(LilvPlugin const * p, LilvNode const * predicate) -> LilvNodes *"""
  return _lilv.lilv_plugin_get_value(*args)

def lilv_plugin_has_feature(*args) -> "bool" :
  """lilv_plugin_has_feature(LilvPlugin const * p, LilvNode const * feature_uri) -> bool"""
  return _lilv.lilv_plugin_has_feature(*args)

def lilv_plugin_get_supported_features(*args) -> "LilvNodes *" :
  """lilv_plugin_get_supported_features(LilvPlugin const * p) -> LilvNodes *"""
  return _lilv.lilv_plugin_get_supported_features(*args)

def lilv_plugin_get_required_features(*args) -> "LilvNodes *" :
  """lilv_plugin_get_required_features(LilvPlugin const * p) -> LilvNodes *"""
  return _lilv.lilv_plugin_get_required_features(*args)

def lilv_plugin_get_optional_features(*args) -> "LilvNodes *" :
  """lilv_plugin_get_optional_features(LilvPlugin const * p) -> LilvNodes *"""
  return _lilv.lilv_plugin_get_optional_features(*args)

def lilv_plugin_has_extension_data(*args) -> "bool" :
  """lilv_plugin_has_extension_data(LilvPlugin const * p, LilvNode const * uri) -> bool"""
  return _lilv.lilv_plugin_has_extension_data(*args)

def lilv_plugin_get_extension_data(*args) -> "LilvNodes *" :
  """lilv_plugin_get_extension_data(LilvPlugin const * p) -> LilvNodes *"""
  return _lilv.lilv_plugin_get_extension_data(*args)

def lilv_plugin_get_num_ports(*args) -> "uint32_t" :
  """lilv_plugin_get_num_ports(LilvPlugin const * p) -> uint32_t"""
  return _lilv.lilv_plugin_get_num_ports(*args)

def lilv_plugin_get_port_ranges_float(*args) -> "void" :
  """lilv_plugin_get_port_ranges_float(LilvPlugin const * p, float * min_values, float * max_values, float * def_values)"""
  return _lilv.lilv_plugin_get_port_ranges_float(*args)

def lilv_plugin_get_num_ports_of_class(*args) -> "uint32_t" :
  """lilv_plugin_get_num_ports_of_class(LilvPlugin const * p, LilvNode const * class_1, LilvNode * node1=None, LilvNode * node2=None) -> uint32_t"""
  return _lilv.lilv_plugin_get_num_ports_of_class(*args)

def lilv_plugin_has_latency(*args) -> "bool" :
  """lilv_plugin_has_latency(LilvPlugin const * p) -> bool"""
  return _lilv.lilv_plugin_has_latency(*args)

def lilv_plugin_get_latency_port_index(*args) -> "uint32_t" :
  """lilv_plugin_get_latency_port_index(LilvPlugin const * p) -> uint32_t"""
  return _lilv.lilv_plugin_get_latency_port_index(*args)

def lilv_plugin_get_port_by_index(*args) -> "LilvPort const *" :
  """lilv_plugin_get_port_by_index(LilvPlugin const * plugin, uint32_t index) -> LilvPort const *"""
  return _lilv.lilv_plugin_get_port_by_index(*args)

def lilv_plugin_get_port_by_symbol(*args) -> "LilvPort const *" :
  """lilv_plugin_get_port_by_symbol(LilvPlugin const * plugin, LilvNode const * symbol) -> LilvPort const *"""
  return _lilv.lilv_plugin_get_port_by_symbol(*args)

def lilv_plugin_get_port_by_designation(*args) -> "LilvPort const *" :
  """lilv_plugin_get_port_by_designation(LilvPlugin const * plugin, LilvNode const * port_class, LilvNode const * designation) -> LilvPort const *"""
  return _lilv.lilv_plugin_get_port_by_designation(*args)

def lilv_plugin_get_project(*args) -> "LilvNode *" :
  """lilv_plugin_get_project(LilvPlugin const * plugin) -> LilvNode *"""
  return _lilv.lilv_plugin_get_project(*args)

def lilv_plugin_get_author_name(*args) -> "LilvNode *" :
  """lilv_plugin_get_author_name(LilvPlugin const * plugin) -> LilvNode *"""
  return _lilv.lilv_plugin_get_author_name(*args)

def lilv_plugin_get_author_email(*args) -> "LilvNode *" :
  """lilv_plugin_get_author_email(LilvPlugin const * plugin) -> LilvNode *"""
  return _lilv.lilv_plugin_get_author_email(*args)

def lilv_plugin_get_author_homepage(*args) -> "LilvNode *" :
  """lilv_plugin_get_author_homepage(LilvPlugin const * plugin) -> LilvNode *"""
  return _lilv.lilv_plugin_get_author_homepage(*args)

def lilv_plugin_is_replaced(*args) -> "bool" :
  """lilv_plugin_is_replaced(LilvPlugin const * plugin) -> bool"""
  return _lilv.lilv_plugin_is_replaced(*args)

def lilv_plugin_write_description(*args) -> "void" :
  """lilv_plugin_write_description(LilvWorld * world, LilvPlugin const * plugin, LilvNode const * base_uri, FILE * plugin_file)"""
  return _lilv.lilv_plugin_write_description(*args)

def lilv_plugin_write_manifest_entry(*args) -> "void" :
  """
    lilv_plugin_write_manifest_entry(LilvWorld * world, LilvPlugin const * plugin, LilvNode const * base_uri, FILE * manifest_file, 
        char const * plugin_file_path)
    """
  return _lilv.lilv_plugin_write_manifest_entry(*args)

def lilv_plugin_get_related(*args) -> "LilvNodes *" :
  """lilv_plugin_get_related(LilvPlugin const * plugin, LilvNode const * type) -> LilvNodes *"""
  return _lilv.lilv_plugin_get_related(*args)

def lilv_port_get_node(*args) -> "LilvNode const *" :
  """lilv_port_get_node(LilvPlugin const * plugin, LilvPort const * port) -> LilvNode const *"""
  return _lilv.lilv_port_get_node(*args)

def lilv_port_get_value(*args) -> "LilvNodes *" :
  """lilv_port_get_value(LilvPlugin const * plugin, LilvPort const * port, LilvNode const * predicate) -> LilvNodes *"""
  return _lilv.lilv_port_get_value(*args)

def lilv_port_get(*args) -> "LilvNode *" :
  """lilv_port_get(LilvPlugin const * plugin, LilvPort const * port, LilvNode const * predicate) -> LilvNode *"""
  return _lilv.lilv_port_get(*args)

def lilv_port_get_properties(*args) -> "LilvNodes *" :
  """lilv_port_get_properties(LilvPlugin const * plugin, LilvPort const * port) -> LilvNodes *"""
  return _lilv.lilv_port_get_properties(*args)

def lilv_port_has_property(*args) -> "bool" :
  """lilv_port_has_property(LilvPlugin const * p, LilvPort const * port, LilvNode const * property_uri) -> bool"""
  return _lilv.lilv_port_has_property(*args)

def lilv_port_supports_event(*args) -> "bool" :
  """lilv_port_supports_event(LilvPlugin const * p, LilvPort const * port, LilvNode const * event_type) -> bool"""
  return _lilv.lilv_port_supports_event(*args)

def lilv_port_get_index(*args) -> "uint32_t" :
  """lilv_port_get_index(LilvPlugin const * plugin, LilvPort const * port) -> uint32_t"""
  return _lilv.lilv_port_get_index(*args)

def lilv_port_get_symbol(*args) -> "LilvNode const *" :
  """lilv_port_get_symbol(LilvPlugin const * plugin, LilvPort const * port) -> LilvNode const *"""
  return _lilv.lilv_port_get_symbol(*args)

def lilv_port_get_name(*args) -> "LilvNode *" :
  """lilv_port_get_name(LilvPlugin const * plugin, LilvPort const * port) -> LilvNode *"""
  return _lilv.lilv_port_get_name(*args)

def lilv_port_get_classes(*args) -> "LilvNodes const *" :
  """lilv_port_get_classes(LilvPlugin const * plugin, LilvPort const * port) -> LilvNodes const *"""
  return _lilv.lilv_port_get_classes(*args)

def lilv_port_is_a(*args) -> "bool" :
  """lilv_port_is_a(LilvPlugin const * plugin, LilvPort const * port, LilvNode const * port_class) -> bool"""
  return _lilv.lilv_port_is_a(*args)

def lilv_port_get_range(*args) -> "void" :
  """
    lilv_port_get_range(LilvPlugin const * plugin, LilvPort const * port, LilvNode ** deflt, LilvNode ** min, 
        LilvNode ** max)
    """
  return _lilv.lilv_port_get_range(*args)

def lilv_port_get_scale_points(*args) -> "LilvScalePoints *" :
  """lilv_port_get_scale_points(LilvPlugin const * plugin, LilvPort const * port) -> LilvScalePoints *"""
  return _lilv.lilv_port_get_scale_points(*args)

def lilv_state_new_from_world(*args) -> "LilvState *" :
  """lilv_state_new_from_world(LilvWorld * world, LV2_URID_Map * map, LilvNode const * subject) -> LilvState *"""
  return _lilv.lilv_state_new_from_world(*args)

def lilv_state_new_from_file(*args) -> "LilvState *" :
  """lilv_state_new_from_file(LilvWorld * world, LV2_URID_Map * map, LilvNode const * subject, char const * path) -> LilvState *"""
  return _lilv.lilv_state_new_from_file(*args)

def lilv_state_new_from_string(*args) -> "LilvState *" :
  """lilv_state_new_from_string(LilvWorld * world, LV2_URID_Map * map, char const * str) -> LilvState *"""
  return _lilv.lilv_state_new_from_string(*args)

def lilv_state_new_from_instance(*args) -> "LilvState *" :
  """
    lilv_state_new_from_instance(LilvPlugin const * plugin, LilvInstanceImpl instance, LV2_URID_Map * map, char const * file_dir, 
        char const * copy_dir, char const * link_dir, char const * save_dir, 
        LilvGetPortValueFunc get_value, void * user_data, uint32_t flags, 
        LV2_Feature const *const * features) -> LilvState *
    """
  return _lilv.lilv_state_new_from_instance(*args)

def lilv_state_free(*args) -> "void" :
  """lilv_state_free(LilvState * state)"""
  return _lilv.lilv_state_free(*args)

def lilv_state_equals(*args) -> "bool" :
  """lilv_state_equals(LilvState const * a, LilvState const * b) -> bool"""
  return _lilv.lilv_state_equals(*args)

def lilv_state_get_num_properties(*args) -> "unsigned int" :
  """lilv_state_get_num_properties(LilvState const * state) -> unsigned int"""
  return _lilv.lilv_state_get_num_properties(*args)

def lilv_state_get_plugin_uri(*args) -> "LilvNode const *" :
  """lilv_state_get_plugin_uri(LilvState const * state) -> LilvNode const *"""
  return _lilv.lilv_state_get_plugin_uri(*args)

def lilv_state_get_uri(*args) -> "LilvNode const *" :
  """lilv_state_get_uri(LilvState const * state) -> LilvNode const *"""
  return _lilv.lilv_state_get_uri(*args)

def lilv_state_get_label(*args) -> "char const *" :
  """lilv_state_get_label(LilvState const * state) -> char const *"""
  return _lilv.lilv_state_get_label(*args)

def lilv_state_set_label(*args) -> "void" :
  """lilv_state_set_label(LilvState * state, char const * label)"""
  return _lilv.lilv_state_set_label(*args)

def lilv_state_emit_port_values(*args) -> "void" :
  """lilv_state_emit_port_values(LilvState const * state, LilvSetPortValueFunc set_value, void * user_data)"""
  return _lilv.lilv_state_emit_port_values(*args)

def lilv_state_restore(*args) -> "void" :
  """
    lilv_state_restore(LilvState const * state, LilvInstanceImpl instance, LilvSetPortValueFunc set_value, 
        void * user_data, uint32_t flags, LV2_Feature const *const * features)
    """
  return _lilv.lilv_state_restore(*args)

def lilv_state_save(*args) -> "int" :
  """
    lilv_state_save(LilvWorld * world, LV2_URID_Map * map, LV2_URID_Unmap * unmap, LilvState const * state, 
        char const * uri, char const * dir, char const * filename) -> int
    """
  return _lilv.lilv_state_save(*args)

def lilv_state_to_string(*args) -> "char *" :
  """
    lilv_state_to_string(LilvWorld * world, LV2_URID_Map * map, LV2_URID_Unmap * unmap, LilvState const * state, 
        char const * uri, char const * base_uri) -> char *
    """
  return _lilv.lilv_state_to_string(*args)

def lilv_state_delete(*args) -> "int" :
  """lilv_state_delete(LilvWorld * world, LilvState const * state) -> int"""
  return _lilv.lilv_state_delete(*args)

def lilv_scale_point_get_label(*args) -> "LilvNode const *" :
  """lilv_scale_point_get_label(LilvScalePoint const * point) -> LilvNode const *"""
  return _lilv.lilv_scale_point_get_label(*args)

def lilv_scale_point_get_value(*args) -> "LilvNode const *" :
  """lilv_scale_point_get_value(LilvScalePoint const * point) -> LilvNode const *"""
  return _lilv.lilv_scale_point_get_value(*args)

def lilv_plugin_class_get_parent_uri(*args) -> "LilvNode const *" :
  """lilv_plugin_class_get_parent_uri(LilvPluginClass const * plugin_class) -> LilvNode const *"""
  return _lilv.lilv_plugin_class_get_parent_uri(*args)

def lilv_plugin_class_get_uri(*args) -> "LilvNode const *" :
  """lilv_plugin_class_get_uri(LilvPluginClass const * plugin_class) -> LilvNode const *"""
  return _lilv.lilv_plugin_class_get_uri(*args)

def lilv_plugin_class_get_label(*args) -> "LilvNode const *" :
  """lilv_plugin_class_get_label(LilvPluginClass const * plugin_class) -> LilvNode const *"""
  return _lilv.lilv_plugin_class_get_label(*args)

def lilv_plugin_class_get_children(*args) -> "LilvPluginClasses *" :
  """lilv_plugin_class_get_children(LilvPluginClass const * plugin_class) -> LilvPluginClasses *"""
  return _lilv.lilv_plugin_class_get_children(*args)
class LilvInstanceImpl(_object):
    """Proxy of C++ LilvInstanceImpl class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LilvInstanceImpl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LilvInstanceImpl, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lv2_descriptor"] = _lilv.LilvInstanceImpl_lv2_descriptor_set
    __swig_getmethods__["lv2_descriptor"] = _lilv.LilvInstanceImpl_lv2_descriptor_get
    if _newclass:lv2_descriptor = _swig_property(_lilv.LilvInstanceImpl_lv2_descriptor_get, _lilv.LilvInstanceImpl_lv2_descriptor_set)
    __swig_setmethods__["lv2_handle"] = _lilv.LilvInstanceImpl_lv2_handle_set
    __swig_getmethods__["lv2_handle"] = _lilv.LilvInstanceImpl_lv2_handle_get
    if _newclass:lv2_handle = _swig_property(_lilv.LilvInstanceImpl_lv2_handle_get, _lilv.LilvInstanceImpl_lv2_handle_set)
    __swig_setmethods__["pimpl"] = _lilv.LilvInstanceImpl_pimpl_set
    __swig_getmethods__["pimpl"] = _lilv.LilvInstanceImpl_pimpl_get
    if _newclass:pimpl = _swig_property(_lilv.LilvInstanceImpl_pimpl_get, _lilv.LilvInstanceImpl_pimpl_set)
    def __init__(self, *args): 
        """__init__(LilvInstanceImpl self) -> LilvInstanceImpl"""
        this = _lilv.new_LilvInstanceImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lilv.delete_LilvInstanceImpl
    __del__ = lambda self : None;
LilvInstanceImpl_swigregister = _lilv.LilvInstanceImpl_swigregister
LilvInstanceImpl_swigregister(LilvInstanceImpl)


def lilv_plugin_instantiate(*args) -> "LilvInstance *" :
  """lilv_plugin_instantiate(LilvPlugin const * plugin, double sample_rate, LV2_Feature const *const * features) -> LilvInstanceImpl"""
  return _lilv.lilv_plugin_instantiate(*args)

def lilv_instance_free(*args) -> "void" :
  """lilv_instance_free(LilvInstanceImpl instance)"""
  return _lilv.lilv_instance_free(*args)

def lilv_instance_get_uri(*args) -> "char const *" :
  """lilv_instance_get_uri(LilvInstanceImpl instance) -> char const *"""
  return _lilv.lilv_instance_get_uri(*args)

def lilv_instance_connect_port(*args) -> "void" :
  """lilv_instance_connect_port(LilvInstanceImpl instance, uint32_t port_index, void * data_location)"""
  return _lilv.lilv_instance_connect_port(*args)

def lilv_instance_activate(*args) -> "void" :
  """lilv_instance_activate(LilvInstanceImpl instance)"""
  return _lilv.lilv_instance_activate(*args)

def lilv_instance_run(*args) -> "void" :
  """lilv_instance_run(LilvInstanceImpl instance, uint32_t sample_count)"""
  return _lilv.lilv_instance_run(*args)

def lilv_instance_deactivate(*args) -> "void" :
  """lilv_instance_deactivate(LilvInstanceImpl instance)"""
  return _lilv.lilv_instance_deactivate(*args)

def lilv_instance_get_extension_data(*args) -> "void const *" :
  """lilv_instance_get_extension_data(LilvInstanceImpl instance, char const * uri) -> void const *"""
  return _lilv.lilv_instance_get_extension_data(*args)

def lilv_instance_get_descriptor(*args) -> "LV2_Descriptor const *" :
  """lilv_instance_get_descriptor(LilvInstanceImpl instance) -> LV2_Descriptor const *"""
  return _lilv.lilv_instance_get_descriptor(*args)

def lilv_instance_get_handle(*args) -> "LV2_Handle" :
  """lilv_instance_get_handle(LilvInstanceImpl instance) -> LV2_Handle"""
  return _lilv.lilv_instance_get_handle(*args)

def lilv_plugin_get_uis(*args) -> "LilvUIs *" :
  """lilv_plugin_get_uis(LilvPlugin const * plugin) -> LilvUIs *"""
  return _lilv.lilv_plugin_get_uis(*args)

def lilv_ui_get_uri(*args) -> "LilvNode const *" :
  """lilv_ui_get_uri(LilvUI const * ui) -> LilvNode const *"""
  return _lilv.lilv_ui_get_uri(*args)

def lilv_ui_get_classes(*args) -> "LilvNodes const *" :
  """lilv_ui_get_classes(LilvUI const * ui) -> LilvNodes const *"""
  return _lilv.lilv_ui_get_classes(*args)

def lilv_ui_is_a(*args) -> "bool" :
  """lilv_ui_is_a(LilvUI const * ui, LilvNode const * class_uri) -> bool"""
  return _lilv.lilv_ui_is_a(*args)

def lilv_ui_is_supported(*args) -> "unsigned int" :
  """
    lilv_ui_is_supported(LilvUI const * ui, LilvUISupportedFunc supported_func, LilvNode const * container_type, 
        LilvNode const ** ui_type) -> unsigned int
    """
  return _lilv.lilv_ui_is_supported(*args)

def lilv_ui_get_bundle_uri(*args) -> "LilvNode const *" :
  """lilv_ui_get_bundle_uri(LilvUI const * ui) -> LilvNode const *"""
  return _lilv.lilv_ui_get_bundle_uri(*args)

def lilv_ui_get_binary_uri(*args) -> "LilvNode const *" :
  """lilv_ui_get_binary_uri(LilvUI const * ui) -> LilvNode const *"""
  return _lilv.lilv_ui_get_binary_uri(*args)

def uri_to_path(*args) -> "char const *" :
  """uri_to_path(char const * uri) -> char const *"""
  return _lilv.uri_to_path(*args)
class Node(_object):
    """Proxy of C++ Lilv::Node class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Lilv::Node self, LilvNode const * node) -> Node
        __init__(Lilv::Node self, Node copy) -> Node
        """
        this = _lilv.new_Node(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lilv.delete_Node
    __del__ = lambda self : None;
    def equals(self, *args) -> "bool" :
        """equals(Node self, Node other) -> bool"""
        return _lilv.Node_equals(self, *args)

    def __eq__(self, *args) -> "bool" :
        """__eq__(Node self, Node other) -> bool"""
        return _lilv.Node___eq__(self, *args)

    def get_turtle_token(self, *args) -> "char *" :
        """get_turtle_token(Node self) -> char *"""
        return _lilv.Node_get_turtle_token(self, *args)

    def is_uri(self, *args) -> "bool" :
        """is_uri(Node self) -> bool"""
        return _lilv.Node_is_uri(self, *args)

    def as_uri(self, *args) -> "char const *" :
        """as_uri(Node self) -> char const *"""
        return _lilv.Node_as_uri(self, *args)

    def is_blank(self, *args) -> "bool" :
        """is_blank(Node self) -> bool"""
        return _lilv.Node_is_blank(self, *args)

    def as_blank(self, *args) -> "char const *" :
        """as_blank(Node self) -> char const *"""
        return _lilv.Node_as_blank(self, *args)

    def is_literal(self, *args) -> "bool" :
        """is_literal(Node self) -> bool"""
        return _lilv.Node_is_literal(self, *args)

    def is_string(self, *args) -> "bool" :
        """is_string(Node self) -> bool"""
        return _lilv.Node_is_string(self, *args)

    def as_string(self, *args) -> "char const *" :
        """as_string(Node self) -> char const *"""
        return _lilv.Node_as_string(self, *args)

    def is_float(self, *args) -> "bool" :
        """is_float(Node self) -> bool"""
        return _lilv.Node_is_float(self, *args)

    def as_float(self, *args) -> "float" :
        """as_float(Node self) -> float"""
        return _lilv.Node_as_float(self, *args)

    def is_int(self, *args) -> "bool" :
        """is_int(Node self) -> bool"""
        return _lilv.Node_is_int(self, *args)

    def as_int(self, *args) -> "int" :
        """as_int(Node self) -> int"""
        return _lilv.Node_as_int(self, *args)

    def is_bool(self, *args) -> "bool" :
        """is_bool(Node self) -> bool"""
        return _lilv.Node_is_bool(self, *args)

    def as_bool(self, *args) -> "bool" :
        """as_bool(Node self) -> bool"""
        return _lilv.Node_as_bool(self, *args)

    __swig_setmethods__["me"] = _lilv.Node_me_set
    __swig_getmethods__["me"] = _lilv.Node_me_get
    if _newclass:me = _swig_property(_lilv.Node_me_get, _lilv.Node_me_set)
    def __str__(self):
    	return self.get_turtle_token()

Node_swigregister = _lilv.Node_swigregister
Node_swigregister(Node)

class ScalePoint(_object):
    """Proxy of C++ Lilv::ScalePoint class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScalePoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScalePoint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Lilv::ScalePoint self, LilvScalePoint const * c_obj) -> ScalePoint"""
        this = _lilv.new_ScalePoint(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_label(self, *args) -> "LilvNode const *" :
        """get_label(ScalePoint self) -> LilvNode const *"""
        return _lilv.ScalePoint_get_label(self, *args)

    def get_value(self, *args) -> "LilvNode const *" :
        """get_value(ScalePoint self) -> LilvNode const *"""
        return _lilv.ScalePoint_get_value(self, *args)

    __swig_setmethods__["me"] = _lilv.ScalePoint_me_set
    __swig_getmethods__["me"] = _lilv.ScalePoint_me_get
    if _newclass:me = _swig_property(_lilv.ScalePoint_me_get, _lilv.ScalePoint_me_set)
    __swig_destroy__ = _lilv.delete_ScalePoint
    __del__ = lambda self : None;
ScalePoint_swigregister = _lilv.ScalePoint_swigregister
ScalePoint_swigregister(ScalePoint)

class PluginClass(_object):
    """Proxy of C++ Lilv::PluginClass class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PluginClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PluginClass, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Lilv::PluginClass self, LilvPluginClass const * c_obj) -> PluginClass"""
        this = _lilv.new_PluginClass(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_parent_uri(self, *args) -> "Lilv::Node" :
        """get_parent_uri(PluginClass self) -> Node"""
        return _lilv.PluginClass_get_parent_uri(self, *args)

    def get_uri(self, *args) -> "Lilv::Node" :
        """get_uri(PluginClass self) -> Node"""
        return _lilv.PluginClass_get_uri(self, *args)

    def get_label(self, *args) -> "Lilv::Node" :
        """get_label(PluginClass self) -> Node"""
        return _lilv.PluginClass_get_label(self, *args)

    def get_children(self, *args) -> "LilvPluginClasses *" :
        """get_children(PluginClass self) -> LilvPluginClasses *"""
        return _lilv.PluginClass_get_children(self, *args)

    __swig_setmethods__["me"] = _lilv.PluginClass_me_set
    __swig_getmethods__["me"] = _lilv.PluginClass_me_get
    if _newclass:me = _swig_property(_lilv.PluginClass_me_get, _lilv.PluginClass_me_set)
    __swig_destroy__ = _lilv.delete_PluginClass
    __del__ = lambda self : None;
PluginClass_swigregister = _lilv.PluginClass_swigregister
PluginClass_swigregister(PluginClass)

class PluginClasses(_object):
    """Proxy of C++ Lilv::PluginClasses class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PluginClasses, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PluginClasses, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Lilv::PluginClasses self, LilvPluginClasses const * c_obj) -> PluginClasses"""
        this = _lilv.new_PluginClasses(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(self, *args) -> "unsigned int" :
        """size(PluginClasses self) -> unsigned int"""
        return _lilv.PluginClasses_size(self, *args)

    def get(self, *args) -> "Lilv::PluginClass const" :
        """get(PluginClasses self, LilvIter * i) -> PluginClass"""
        return _lilv.PluginClasses_get(self, *args)

    def begin(self, *args) -> "LilvIter *" :
        """begin(PluginClasses self) -> LilvIter *"""
        return _lilv.PluginClasses_begin(self, *args)

    def next(self, *args) -> "LilvIter *" :
        """next(PluginClasses self, LilvIter * i) -> LilvIter *"""
        return _lilv.PluginClasses_next(self, *args)

    def is_end(self, *args) -> "bool" :
        """is_end(PluginClasses self, LilvIter * i) -> bool"""
        return _lilv.PluginClasses_is_end(self, *args)

    __swig_setmethods__["me"] = _lilv.PluginClasses_me_set
    __swig_getmethods__["me"] = _lilv.PluginClasses_me_get
    if _newclass:me = _swig_property(_lilv.PluginClasses_me_get, _lilv.PluginClasses_me_set)
    def get_by_uri(self, *args) -> "Lilv::PluginClass const" :
        """get_by_uri(PluginClasses self, LilvNode const * uri) -> PluginClass"""
        return _lilv.PluginClasses_get_by_uri(self, *args)

    __swig_destroy__ = _lilv.delete_PluginClasses
    __del__ = lambda self : None;
PluginClasses_swigregister = _lilv.PluginClasses_swigregister
PluginClasses_swigregister(PluginClasses)

class ScalePoints(_object):
    """Proxy of C++ Lilv::ScalePoints class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScalePoints, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScalePoints, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Lilv::ScalePoints self, LilvScalePoints const * c_obj) -> ScalePoints"""
        this = _lilv.new_ScalePoints(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(self, *args) -> "unsigned int" :
        """size(ScalePoints self) -> unsigned int"""
        return _lilv.ScalePoints_size(self, *args)

    def get(self, *args) -> "Lilv::ScalePoint const" :
        """get(ScalePoints self, LilvIter * i) -> ScalePoint"""
        return _lilv.ScalePoints_get(self, *args)

    def begin(self, *args) -> "LilvIter *" :
        """begin(ScalePoints self) -> LilvIter *"""
        return _lilv.ScalePoints_begin(self, *args)

    def next(self, *args) -> "LilvIter *" :
        """next(ScalePoints self, LilvIter * i) -> LilvIter *"""
        return _lilv.ScalePoints_next(self, *args)

    def is_end(self, *args) -> "bool" :
        """is_end(ScalePoints self, LilvIter * i) -> bool"""
        return _lilv.ScalePoints_is_end(self, *args)

    __swig_setmethods__["me"] = _lilv.ScalePoints_me_set
    __swig_getmethods__["me"] = _lilv.ScalePoints_me_get
    if _newclass:me = _swig_property(_lilv.ScalePoints_me_get, _lilv.ScalePoints_me_set)
    __swig_destroy__ = _lilv.delete_ScalePoints
    __del__ = lambda self : None;
ScalePoints_swigregister = _lilv.ScalePoints_swigregister
ScalePoints_swigregister(ScalePoints)

class Nodes(_object):
    """Proxy of C++ Lilv::Nodes class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nodes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Nodes, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Lilv::Nodes self, LilvNodes const * c_obj) -> Nodes"""
        this = _lilv.new_Nodes(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(self, *args) -> "unsigned int" :
        """size(Nodes self) -> unsigned int"""
        return _lilv.Nodes_size(self, *args)

    def get(self, *args) -> "Lilv::Node const" :
        """get(Nodes self, LilvIter * i) -> Node"""
        return _lilv.Nodes_get(self, *args)

    def begin(self, *args) -> "LilvIter *" :
        """begin(Nodes self) -> LilvIter *"""
        return _lilv.Nodes_begin(self, *args)

    def next(self, *args) -> "LilvIter *" :
        """next(Nodes self, LilvIter * i) -> LilvIter *"""
        return _lilv.Nodes_next(self, *args)

    def is_end(self, *args) -> "bool" :
        """is_end(Nodes self, LilvIter * i) -> bool"""
        return _lilv.Nodes_is_end(self, *args)

    __swig_setmethods__["me"] = _lilv.Nodes_me_set
    __swig_getmethods__["me"] = _lilv.Nodes_me_get
    if _newclass:me = _swig_property(_lilv.Nodes_me_get, _lilv.Nodes_me_set)
    def contains(self, *args) -> "bool" :
        """contains(Nodes self, Node node) -> bool"""
        return _lilv.Nodes_contains(self, *args)

    def get_first(self, *args) -> "Lilv::Node" :
        """get_first(Nodes self) -> Node"""
        return _lilv.Nodes_get_first(self, *args)

    __swig_destroy__ = _lilv.delete_Nodes
    __del__ = lambda self : None;
Nodes_swigregister = _lilv.Nodes_swigregister
Nodes_swigregister(Nodes)

class UI(_object):
    """Proxy of C++ Lilv::UI class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UI, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Lilv::UI self, LilvUI const * c_obj) -> UI"""
        this = _lilv.new_UI(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_uri(self, *args) -> "LilvNode const *" :
        """get_uri(UI self) -> LilvNode const *"""
        return _lilv.UI_get_uri(self, *args)

    def get_bundle_uri(self, *args) -> "LilvNode const *" :
        """get_bundle_uri(UI self) -> LilvNode const *"""
        return _lilv.UI_get_bundle_uri(self, *args)

    def get_binary_uri(self, *args) -> "LilvNode const *" :
        """get_binary_uri(UI self) -> LilvNode const *"""
        return _lilv.UI_get_binary_uri(self, *args)

    def get_classes(self, *args) -> "LilvNodes const *" :
        """get_classes(UI self) -> LilvNodes const *"""
        return _lilv.UI_get_classes(self, *args)

    def is_a(self, *args) -> "bool" :
        """is_a(UI self, LilvNode const * class_uri) -> bool"""
        return _lilv.UI_is_a(self, *args)

    __swig_setmethods__["me"] = _lilv.UI_me_set
    __swig_getmethods__["me"] = _lilv.UI_me_get
    if _newclass:me = _swig_property(_lilv.UI_me_get, _lilv.UI_me_set)
    __swig_destroy__ = _lilv.delete_UI
    __del__ = lambda self : None;
UI_swigregister = _lilv.UI_swigregister
UI_swigregister(UI)

class UIs(_object):
    """Proxy of C++ Lilv::UIs class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UIs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UIs, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Lilv::UIs self, LilvUIs const * c_obj) -> UIs"""
        this = _lilv.new_UIs(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(self, *args) -> "unsigned int" :
        """size(UIs self) -> unsigned int"""
        return _lilv.UIs_size(self, *args)

    def get(self, *args) -> "Lilv::UI const" :
        """get(UIs self, LilvIter * i) -> UI"""
        return _lilv.UIs_get(self, *args)

    def begin(self, *args) -> "LilvIter *" :
        """begin(UIs self) -> LilvIter *"""
        return _lilv.UIs_begin(self, *args)

    def next(self, *args) -> "LilvIter *" :
        """next(UIs self, LilvIter * i) -> LilvIter *"""
        return _lilv.UIs_next(self, *args)

    def is_end(self, *args) -> "bool" :
        """is_end(UIs self, LilvIter * i) -> bool"""
        return _lilv.UIs_is_end(self, *args)

    __swig_setmethods__["me"] = _lilv.UIs_me_set
    __swig_getmethods__["me"] = _lilv.UIs_me_get
    if _newclass:me = _swig_property(_lilv.UIs_me_get, _lilv.UIs_me_set)
    __swig_destroy__ = _lilv.delete_UIs
    __del__ = lambda self : None;
UIs_swigregister = _lilv.UIs_swigregister
UIs_swigregister(UIs)

class Port(_object):
    """Proxy of C++ Lilv::Port class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Port, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Port, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Lilv::Port self, LilvPlugin const * p, LilvPort const * c_obj) -> Port"""
        this = _lilv.new_Port(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_value(self, *args) -> "LilvNodes *" :
        """get_value(Port self, LilvNode * predicate) -> LilvNodes *"""
        return _lilv.Port_get_value(self, *args)

    def get_properties(self, *args) -> "LilvNodes *" :
        """get_properties(Port self) -> LilvNodes *"""
        return _lilv.Port_get_properties(self, *args)

    def has_property(self, *args) -> "bool" :
        """has_property(Port self, LilvNode * property_uri) -> bool"""
        return _lilv.Port_has_property(self, *args)

    def supports_event(self, *args) -> "bool" :
        """supports_event(Port self, LilvNode * event_uri) -> bool"""
        return _lilv.Port_supports_event(self, *args)

    def get_symbol(self, *args) -> "LilvNode const *" :
        """get_symbol(Port self) -> LilvNode const *"""
        return _lilv.Port_get_symbol(self, *args)

    def get_name(self, *args) -> "LilvNode *" :
        """get_name(Port self) -> LilvNode *"""
        return _lilv.Port_get_name(self, *args)

    def get_classes(self, *args) -> "LilvNodes const *" :
        """get_classes(Port self) -> LilvNodes const *"""
        return _lilv.Port_get_classes(self, *args)

    def is_a(self, *args) -> "bool" :
        """is_a(Port self, LilvNode * port_class) -> bool"""
        return _lilv.Port_is_a(self, *args)

    def get_scale_points(self, *args) -> "LilvScalePoints *" :
        """get_scale_points(Port self) -> LilvScalePoints *"""
        return _lilv.Port_get_scale_points(self, *args)

    __swig_setmethods__["parent"] = _lilv.Port_parent_set
    __swig_getmethods__["parent"] = _lilv.Port_parent_get
    if _newclass:parent = _swig_property(_lilv.Port_parent_get, _lilv.Port_parent_set)
    __swig_setmethods__["me"] = _lilv.Port_me_set
    __swig_getmethods__["me"] = _lilv.Port_me_get
    if _newclass:me = _swig_property(_lilv.Port_me_get, _lilv.Port_me_set)
    __swig_destroy__ = _lilv.delete_Port
    __del__ = lambda self : None;
Port_swigregister = _lilv.Port_swigregister
Port_swigregister(Port)

class Plugin(_object):
    """Proxy of C++ Lilv::Plugin class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plugin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Plugin, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Lilv::Plugin self, LilvPlugin const * c_obj) -> Plugin"""
        this = _lilv.new_Plugin(*args)
        try: self.this.append(this)
        except: self.this = this
    def verify(self, *args) -> "bool" :
        """verify(Plugin self) -> bool"""
        return _lilv.Plugin_verify(self, *args)

    def get_uri(self, *args) -> "Lilv::Node" :
        """get_uri(Plugin self) -> Node"""
        return _lilv.Plugin_get_uri(self, *args)

    def get_bundle_uri(self, *args) -> "Lilv::Node" :
        """get_bundle_uri(Plugin self) -> Node"""
        return _lilv.Plugin_get_bundle_uri(self, *args)

    def get_data_uris(self, *args) -> "Lilv::Nodes" :
        """get_data_uris(Plugin self) -> Nodes"""
        return _lilv.Plugin_get_data_uris(self, *args)

    def get_library_uri(self, *args) -> "Lilv::Node" :
        """get_library_uri(Plugin self) -> Node"""
        return _lilv.Plugin_get_library_uri(self, *args)

    def get_name(self, *args) -> "Lilv::Node" :
        """get_name(Plugin self) -> Node"""
        return _lilv.Plugin_get_name(self, *args)

    def get_class(self, *args) -> "Lilv::PluginClass" :
        """get_class(Plugin self) -> PluginClass"""
        return _lilv.Plugin_get_class(self, *args)

    def get_value(self, *args) -> "Lilv::Nodes" :
        """get_value(Plugin self, Node pred) -> Nodes"""
        return _lilv.Plugin_get_value(self, *args)

    def has_feature(self, *args) -> "bool" :
        """has_feature(Plugin self, Node feature_uri) -> bool"""
        return _lilv.Plugin_has_feature(self, *args)

    def get_supported_features(self, *args) -> "Lilv::Nodes" :
        """get_supported_features(Plugin self) -> Nodes"""
        return _lilv.Plugin_get_supported_features(self, *args)

    def get_required_features(self, *args) -> "Lilv::Nodes" :
        """get_required_features(Plugin self) -> Nodes"""
        return _lilv.Plugin_get_required_features(self, *args)

    def get_optional_features(self, *args) -> "Lilv::Nodes" :
        """get_optional_features(Plugin self) -> Nodes"""
        return _lilv.Plugin_get_optional_features(self, *args)

    def get_num_ports(self, *args) -> "unsigned int" :
        """get_num_ports(Plugin self) -> unsigned int"""
        return _lilv.Plugin_get_num_ports(self, *args)

    def has_latency(self, *args) -> "bool" :
        """has_latency(Plugin self) -> bool"""
        return _lilv.Plugin_has_latency(self, *args)

    def get_latency_port_index(self, *args) -> "unsigned int" :
        """get_latency_port_index(Plugin self) -> unsigned int"""
        return _lilv.Plugin_get_latency_port_index(self, *args)

    def get_author_name(self, *args) -> "Lilv::Node" :
        """get_author_name(Plugin self) -> Node"""
        return _lilv.Plugin_get_author_name(self, *args)

    def get_author_email(self, *args) -> "Lilv::Node" :
        """get_author_email(Plugin self) -> Node"""
        return _lilv.Plugin_get_author_email(self, *args)

    def get_author_homepage(self, *args) -> "Lilv::Node" :
        """get_author_homepage(Plugin self) -> Node"""
        return _lilv.Plugin_get_author_homepage(self, *args)

    def is_replaced(self, *args) -> "bool" :
        """is_replaced(Plugin self) -> bool"""
        return _lilv.Plugin_is_replaced(self, *args)

    def get_extension_data(self, *args) -> "Lilv::Nodes" :
        """get_extension_data(Plugin self) -> Nodes"""
        return _lilv.Plugin_get_extension_data(self, *args)

    def get_uis(self, *args) -> "Lilv::UIs" :
        """get_uis(Plugin self) -> UIs"""
        return _lilv.Plugin_get_uis(self, *args)

    def get_related(self, *args) -> "Lilv::Nodes" :
        """get_related(Plugin self, Node type) -> Nodes"""
        return _lilv.Plugin_get_related(self, *args)

    def get_port_by_index(self, *args) -> "Lilv::Port" :
        """get_port_by_index(Plugin self, unsigned int index) -> Port"""
        return _lilv.Plugin_get_port_by_index(self, *args)

    def get_port_by_symbol(self, *args) -> "Lilv::Port" :
        """get_port_by_symbol(Plugin self, LilvNode * symbol) -> Port"""
        return _lilv.Plugin_get_port_by_symbol(self, *args)

    def get_port_ranges_float(self, *args) -> "void" :
        """get_port_ranges_float(Plugin self, float * min_values, float * max_values, float * def_values)"""
        return _lilv.Plugin_get_port_ranges_float(self, *args)

    def get_num_ports_of_class(self, *args) -> "unsigned int" :
        """get_num_ports_of_class(Plugin self, LilvNode * class_1, LilvNode * node1=None, LilvNode * node2=None) -> unsigned int"""
        return _lilv.Plugin_get_num_ports_of_class(self, *args)

    __swig_setmethods__["me"] = _lilv.Plugin_me_set
    __swig_getmethods__["me"] = _lilv.Plugin_me_get
    if _newclass:me = _swig_property(_lilv.Plugin_me_get, _lilv.Plugin_me_set)
    __swig_destroy__ = _lilv.delete_Plugin
    __del__ = lambda self : None;
Plugin_swigregister = _lilv.Plugin_swigregister
Plugin_swigregister(Plugin)

class Plugins(_object):
    """Proxy of C++ Lilv::Plugins class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plugins, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Plugins, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Lilv::Plugins self, LilvPlugins const * c_obj) -> Plugins"""
        this = _lilv.new_Plugins(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(self, *args) -> "unsigned int" :
        """size(Plugins self) -> unsigned int"""
        return _lilv.Plugins_size(self, *args)

    def get(self, *args) -> "Lilv::Plugin const" :
        """get(Plugins self, LilvIter * i) -> Plugin"""
        return _lilv.Plugins_get(self, *args)

    def begin(self, *args) -> "LilvIter *" :
        """begin(Plugins self) -> LilvIter *"""
        return _lilv.Plugins_begin(self, *args)

    def next(self, *args) -> "LilvIter *" :
        """next(Plugins self, LilvIter * i) -> LilvIter *"""
        return _lilv.Plugins_next(self, *args)

    def is_end(self, *args) -> "bool" :
        """is_end(Plugins self, LilvIter * i) -> bool"""
        return _lilv.Plugins_is_end(self, *args)

    __swig_setmethods__["me"] = _lilv.Plugins_me_set
    __swig_getmethods__["me"] = _lilv.Plugins_me_get
    if _newclass:me = _swig_property(_lilv.Plugins_me_get, _lilv.Plugins_me_set)
    def get_by_uri(self, *args) -> "Lilv::Plugin const" :
        """get_by_uri(Plugins self, LilvNode const * uri) -> Plugin"""
        return _lilv.Plugins_get_by_uri(self, *args)

    def __iter__(self):
    	class Iterator(object):
    		def __init__(self, plugins):
    			self.plugins = plugins
    			self.iter    = plugins.begin()

    		def __next__(self):
    			if self.plugins.is_end(self.iter):
    				raise StopIteration
    			plugin = self.plugins.get(self.iter)
    			self.iter = self.plugins.next(self.iter)
    			return plugin

    		def next(self):
    			"Python 2 iterator protocol"
    			return Iterator.__next__(self)

    	return Iterator(self)

    def get_by_uri(self, *args):
    	"""get_by_uri(self, LilvNode uri) -> PluginClass"""
    	ret = _lilv.Plugins_get_by_uri(self, *args)
    	if ret.me is None:
    		return None
    	else:
    		return ret

    __swig_destroy__ = _lilv.delete_Plugins
    __del__ = lambda self : None;
Plugins_swigregister = _lilv.Plugins_swigregister
Plugins_swigregister(Plugins)

class Instance(_object):
    """Proxy of C++ Lilv::Instance class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Instance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Instance, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Lilv::Instance self, LilvInstanceImpl instance) -> Instance
        __init__(Lilv::Instance self, Plugin plugin, double sample_rate) -> Instance
        __init__(Lilv::Instance self, Plugin plugin, double sample_rate, LV2_Feature *const * features) -> Instance
        """
        this = _lilv.new_Instance(*args)
        try: self.this.append(this)
        except: self.this = this
    def create(*args) -> "Lilv::Instance *" :
        """create(Plugin plugin, double sample_rate, LV2_Feature *const * features) -> Instance"""
        return _lilv.Instance_create(*args)

    if _newclass:create = staticmethod(create)
    __swig_getmethods__["create"] = lambda x: create
    def connect_port(self, *args) -> "void" :
        """connect_port(Instance self, unsigned int port_index, void * data_location)"""
        return _lilv.Instance_connect_port(self, *args)

    def activate(self, *args) -> "void" :
        """activate(Instance self)"""
        return _lilv.Instance_activate(self, *args)

    def run(self, *args) -> "void" :
        """run(Instance self, unsigned int sample_count)"""
        return _lilv.Instance_run(self, *args)

    def deactivate(self, *args) -> "void" :
        """deactivate(Instance self)"""
        return _lilv.Instance_deactivate(self, *args)

    def get_extension_data(self, *args) -> "void const *" :
        """get_extension_data(Instance self, char const * uri) -> void const *"""
        return _lilv.Instance_get_extension_data(self, *args)

    def get_descriptor(self, *args) -> "LV2_Descriptor const *" :
        """get_descriptor(Instance self) -> LV2_Descriptor const *"""
        return _lilv.Instance_get_descriptor(self, *args)

    def get_handle(self, *args) -> "LV2_Handle" :
        """get_handle(Instance self) -> LV2_Handle"""
        return _lilv.Instance_get_handle(self, *args)

    __swig_setmethods__["me"] = _lilv.Instance_me_set
    __swig_getmethods__["me"] = _lilv.Instance_me_get
    if _newclass:me = _swig_property(_lilv.Instance_me_get, _lilv.Instance_me_set)
    __swig_destroy__ = _lilv.delete_Instance
    __del__ = lambda self : None;
Instance_swigregister = _lilv.Instance_swigregister
Instance_swigregister(Instance)

def Instance_create(*args) -> "Lilv::Instance *" :
  """Instance_create(Plugin plugin, double sample_rate, LV2_Feature *const * features) -> Instance"""
  return _lilv.Instance_create(*args)

class World(_object):
    """Proxy of C++ Lilv::World class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, World, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, World, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Lilv::World self) -> World"""
        this = _lilv.new_World(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lilv.delete_World
    __del__ = lambda self : None;
    def new_uri(self, *args) -> "LilvNode *" :
        """new_uri(World self, char const * uri) -> LilvNode *"""
        return _lilv.World_new_uri(self, *args)

    def new_string(self, *args) -> "LilvNode *" :
        """new_string(World self, char const * str) -> LilvNode *"""
        return _lilv.World_new_string(self, *args)

    def new_int(self, *args) -> "LilvNode *" :
        """new_int(World self, int val) -> LilvNode *"""
        return _lilv.World_new_int(self, *args)

    def new_float(self, *args) -> "LilvNode *" :
        """new_float(World self, float val) -> LilvNode *"""
        return _lilv.World_new_float(self, *args)

    def new_bool(self, *args) -> "LilvNode *" :
        """new_bool(World self, bool val) -> LilvNode *"""
        return _lilv.World_new_bool(self, *args)

    def find_nodes(self, *args) -> "Lilv::Nodes" :
        """find_nodes(World self, LilvNode const * subject, LilvNode const * predicate, LilvNode const * object) -> Nodes"""
        return _lilv.World_find_nodes(self, *args)

    def set_option(self, *args) -> "void" :
        """set_option(World self, char const * uri, LilvNode * value)"""
        return _lilv.World_set_option(self, *args)

    def load_all(self, *args) -> "void" :
        """load_all(World self)"""
        return _lilv.World_load_all(self, *args)

    def load_bundle(self, *args) -> "void" :
        """load_bundle(World self, LilvNode * bundle_uri)"""
        return _lilv.World_load_bundle(self, *args)

    def get_plugin_class(self, *args) -> "LilvPluginClass const *" :
        """get_plugin_class(World self) -> LilvPluginClass const *"""
        return _lilv.World_get_plugin_class(self, *args)

    def get_plugin_classes(self, *args) -> "LilvPluginClasses const *" :
        """get_plugin_classes(World self) -> LilvPluginClasses const *"""
        return _lilv.World_get_plugin_classes(self, *args)

    def get_all_plugins(self, *args) -> "Lilv::Plugins const" :
        """get_all_plugins(World self) -> Plugins"""
        return _lilv.World_get_all_plugins(self, *args)

    def load_resource(self, *args) -> "int" :
        """load_resource(World self, LilvNode const * resource) -> int"""
        return _lilv.World_load_resource(self, *args)

    __swig_setmethods__["me"] = _lilv.World_me_set
    __swig_getmethods__["me"] = _lilv.World_me_get
    if _newclass:me = _swig_property(_lilv.World_me_get, _lilv.World_me_set)
World_swigregister = _lilv.World_swigregister
World_swigregister(World)

# This file is compatible with both classic and new-style classes.


